{
  "openapi": "3.1.0",
  "info": {
    "title": "rebased-stardust-indexer",
    "description": "",
    "license": {
      "name": ""
    },
    "version": "0.2.0"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/v1/basic/resolved/{address}": {
      "get": {
        "tags": [
          "routes::v1::basic"
        ],
        "summary": "Get the `BasicOutput`s owned by the address considering resolved expiration\nunlock condition.",
        "description": "Fetches basic outputs for a specified address, considering the resolved expiration unlock conditions.\n    The expiration unlock conditions determine access based on whether the latest checkpoint timestamp is\n    before or after the expiration time. Results can be paginated by providing optional `page` and `limit`\n    query parameters.\n\n    Before Expiration:\n    Objects are accessible to the `owner` if the latest checkpoint UNIX timestamp (in milliseconds)\n    is `less than` the expiration time.\n\n    After Expiration:\n    Objects become accessible to the `return_address` if the latest checkpoint UNIX timestamp (in milliseconds)\n    is `greater than or equal to` the expiration time.",
        "operationId": "resolved",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The hexadecimal address for which to fetch basic outputs.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Defaults to 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page for pagination. Defaults to 10.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicOutputVec"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    },
    "/v1/basic/{address}": {
      "get": {
        "tags": [
          "routes::v1::basic"
        ],
        "summary": "Get the `BasicOutput`s owned by the address",
        "description": "Fetches basic outputs for a specified address with optional pagination. This endpoint does not resolve\n    expiration unlock conditions and directly returns the basic outputs associated with the provided address.\n    Results can be paginated by providing optional `page` and `limit` query parameters.",
        "operationId": "basic",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The hexadecimal address for which to fetch basic outputs.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Defaults to 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page for pagination. Defaults to 10.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicOutputVec"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    },
    "/v1/nft/resolved/{address}": {
      "get": {
        "tags": [
          "routes::v1::nft"
        ],
        "summary": "Get the `NftOutput`s owned by the address considering resolved expiration\nunlock condition.",
        "description": "Fetches NFT outputs for a specified address, considering the resolved expiration unlock conditions.\n    The expiration unlock conditions determine access based on whether the latest checkpoint timestamp is\n    before or after the expiration time. Results can be paginated by providing optional `page` and `limit`\n    query parameters.\n\n    Before Expiration:\n    NFT outputs are accessible to the **owner** if the latest checkpoint UNIX timestamp (in milliseconds)\n    is `less than` the expiration time.\n\n    After Expiration:\n    NFT outputs become accessible to the **return_address** if the latest checkpoint UNIX timestamp (in milliseconds)\n    is `greater than or equal to` the expiration time.",
        "operationId": "resolved",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The hexadecimal address for which to fetch NFT outputs.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Defaults to 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page for pagination. Defaults to 10.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftOutputVec"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    },
    "/v1/nft/{address}": {
      "get": {
        "tags": [
          "routes::v1::nft"
        ],
        "summary": "Get the `NftOutput`s owned by the address",
        "description": "Fetches NFT outputs for a specified address with optional pagination. This endpoint directly returns\n    NFT outputs associated with the given address without considering expiration unlock conditions.\n    Results can be paginated by providing optional `page` and `limit` query parameters.",
        "operationId": "nft",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The hexadecimal address for which to fetch NFT outputs.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Defaults to 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page for pagination. Defaults to 10.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftOutputVec"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Bag": {
        "type": "object",
        "required": [
          "id",
          "size"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "Balance": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "BasicOutput": {
        "type": "object",
        "required": [
          "id",
          "balance",
          "native_tokens"
        ],
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/Balance"
          },
          "expiration": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Expiration"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          "native_tokens": {
            "$ref": "#/components/schemas/Bag"
          },
          "sender": {
            "type": [
              "string",
              "null"
            ]
          },
          "storage_deposit_return": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/StorageDepositReturn"
              }
            ]
          },
          "tag": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          "timelock": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Timelock"
              }
            ]
          }
        }
      },
      "BasicOutputVec": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/BasicOutput"
        }
      },
      "Expiration": {
        "type": "object",
        "required": [
          "owner",
          "return_address",
          "unix_time"
        ],
        "properties": {
          "owner": {
            "type": "string"
          },
          "return_address": {
            "type": "string"
          },
          "unix_time": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "NftOutput": {
        "type": "object",
        "required": [
          "id",
          "balance",
          "native_tokens"
        ],
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/Balance"
          },
          "expiration": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Expiration"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "native_tokens": {
            "$ref": "#/components/schemas/Bag"
          },
          "storage_deposit_return": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/StorageDepositReturn"
              }
            ]
          },
          "timelock": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Timelock"
              }
            ]
          }
        }
      },
      "NftOutputVec": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/NftOutput"
        }
      },
      "StorageDepositReturn": {
        "type": "object",
        "required": [
          "return_address",
          "return_amount"
        ],
        "properties": {
          "return_address": {
            "type": "string"
          },
          "return_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "Timelock": {
        "type": "object",
        "required": [
          "unix_time"
        ],
        "properties": {
          "unix_time": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      }
    }
  }
}