use clap::Args;
use iota_types::{STARDUST_PACKAGE_ID, base_types::ObjectID};
use url::Url;

/// Max queue size of checkpoints for the Indexer to process
const DOWNLOAD_QUEUE_SIZE: usize = 200;
/// Limit indexing parallelism on big checkpoints to avoid OOM,
/// by limiting the total size of batch checkpoints to ~20MB
const CHECKPOINT_PROCESSING_BATCH_DATA_LIMIT: usize = 20000000;

#[derive(Args, Debug, Clone)]
pub struct IndexerConfig {
    /// The fullnode REST API URL used to fetch checkpoint data and synchronize
    #[arg(long)]
    pub remote_store_url: Url,
    /// Max queue size of checkpoints for the Indexer to process
    #[arg(long, default_value_t = DOWNLOAD_QUEUE_SIZE)]
    #[arg(env = "DOWNLOAD_QUEUE_SIZE")]
    pub download_queue_size: usize,
    /// Limit indexing parallelism on big checkpoints to avoid OOM,
    /// by limiting the total size of batch checkpoints to ~20MB.
    #[arg(long, default_value_t = CHECKPOINT_PROCESSING_BATCH_DATA_LIMIT)]
    #[arg(env = "CHECKPOINT_PROCESSING_BATCH_DATA_LIMIT")]
    pub checkpoint_processing_batch_data_limit: usize,
    /// Reset the current database
    #[arg(long)]
    pub reset_db: bool,
    /// Instruct the Indexer to store Objects generated by these package IDs
    #[arg(short, long, default_value_t = STARDUST_PACKAGE_ID)]
    pub package_id: ObjectID,
}
